training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type~.,data=training,method="glm")
modelFit
modelFit$finalModel
predictions <-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
?predict
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
training$Superplasticizer
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
View(training)
colnames(training)
train <- training[,c(58,69)]
View(train)
View(train)
train <- training[,c(58:69)]
View(train)
preProc(preProcess(training[,c(58:69)],method="pca",pcaComp=2))
preProc<-(preProcess(training[,c(58:69)],method="pca",pcaComp=2))
preProc
AlzPC <- predict(preProc,training[,c(58:69)])
AlzPC
modelFit <- train(training$diagnosis ~.,method=glm,data=training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
preProc <- preProcess(training[,c(58:69)],method="pca",thresh=0.8)
preProcess()
preProc
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
preProc <- preProcess(training[,c(1,58:69)],method="pca",thresh=0.8)
trainPC1 <- predict(preProc,training[,c(1,58:69)])
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(training[,c(1,58:69)],method="pca",thresh=0.8)
trainPC <- predict(preProc,training[,c(1,58:69)])
modelFit <- train(training$diagnosis ~ .,method=glm,data=trainPC)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = adData[ inTrain,c(1,58:69)]
View(training)
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
preProc <- preProcess(training,method="pca",thresh=0.8)
trainPC <- predict(preProc,training)
View(trainPC)
modelFit <- train(training$diagnosis ~ .,method=glm,data=trainPC)
modelFit2 <- train(training$diagnosis ~ .,method=glm,data=training)
View(training)
View(trainPC)
modelFit1 <- train(training$diagnosis ~ .,method=glm,data=trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(spam[,-58]+1),methods="pca",pcaComp=2)
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
View(trainPC)
View(spam)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
preProc <- preProcess(training[,-1],method="pca",thresh=0.8)
trainPC <- predict(preProc,training)
modelFit1 <- train(training$diagnosis ~ .,method=glm,data=trainPC)
modelFit2 <- train(training$diagnosis ~ .,method=glm,data=training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
preProc <- preProcess(training[,-1],method="pca",thresh=0.8)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
preProc <- preProcess(training[,-1],method="pca",thresh=0.8)
trainPC <- predict(preProc,training)
View(trainPC)
trainPC <- predict(preProc,training[,-1])
View(trainPC)
modelFit1 <- train(training$diagnosis ~ .,method=glm,data=trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
View(trainPC)
preProc
View(trainPC)
View(spam)
str(training)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
modelFit
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
str(training)
preProc <- preProcess(training[,-1],method="pca",thresh=0.8)
trainPC <- predict(preProc,training[,-1])
View(trainPC)
View(training)
modelFit1 <- train(training$diagnosis ~ .,method=glm,data=trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
View(trainPC)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
View(training)
preProc <- preProcess(training[,-1],method="pca",thresh=0.8)
trainPC <- predict(preProc,training[,-1])
View(trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
View(trainPC)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
View(training)
preProc <- preProcess(training[,-1],method="pca",thresh=0.8)
preProc
trainPC <- predict(preProc,training[,-1])
View(trainPC)
modelFit1 <- train(training$diagnosis ~ .,method=glm,data=trainPC)
trainPC <- predict(preProc,training[,-1])
View(trainPC)
preProc <- preProcess(training[,-1],method="pca",pcaCOMP=2)
trainPC <- predict(preProc,training[,-1])
View(trainPC)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(1,58:69)]
testing = adData[-inTrain,c(1,58:69)]
View(training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(58:69,1)]
testing = adData[-inTrain,c(58:69,1)]
View(training)
preProc <- preProcess(training[,-13],method="pca",thresh=.8)
trainPC <- predict(preProc,training[,-13])
View(trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
preProc
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
preProc <- preProcess(training[,c(58:69)],method="pca",thresh=0.8)
preProc
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
View(trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2,thresh=.8)
trainPC <- predict(preProc,log10(training[,-58]+1))
View(trainPC)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",pcaComp=2,thresh=.2)
trainPC <- predict(preProc,log10(training[,-58]+1))
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),methods="pca",thresh=.2)
trainPC <- predict(preProc,log10(training[,-58]+1))
preProc <- preProcess(log10(training[,-58]+1),methods="pca",thresh=.1)
preProc
View(trainPC)
?train
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(58:69,1)]
testing = adData[-inTrain,c(58:69,1)]
View(testing)
View(training)
preProc <- preProcess(training[,-13],method="pca",thresh=.8)
trainPC <- predict(preProc,training[,-13])
View(trainPC)
modelFit2 <- train(training$diagnosis ~ .,method=glm,data=training)
View(training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(58:69,1)]
testing = adData[-inTrain,c(58:69,1)]
preProc <- preProcess(training[,-13],method="pca",thresh=.8)
trainPC <- predict(preProc,training[,-13])
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=trainPC)
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=training)
modelFit1
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,c(58:69,1)]
testing = adData[-inTrain,c(58:69,1)]
preProc <- preProcess(training[,-13],method="pca",thresh=.8)
trainPC <- predict(preProc,training[,-13])
testPC <- predict(preProc, testing[,-13])
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=trainPC)
confusionMatrix(testing$diagnosis,predict(modelFit1,testPC))
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=training)
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit2,testing))
library(ISLR); data(Wage); library(ggplot2); library(caret)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
modFit <- train(wage~.,method="gbm",data=training,verbose=FALSE)
library(ISLR); data(Wage); library(ggplot2); library(caret)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
modFit <- train(wage~.,method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
View(segmentationOriginal)
inTrain = subset(segmentationOriginal$Case)
?subset
View(segmentationOriginal)
inTrain = subset(segmentationOriginal, Case==1)
View(segmentationOriginal)
View(testing)
View(inTrain)
View(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training = subset(segmentationOriginal, Case=="Train")
testing = subset(segmentationOriginal, Case=="Test")
View(testing)
View(training)
set.seed(125)
modFit <- train(Class~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel, use.n=TRUE,all=TRUE,cex=.8)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel, use.n=TRUE,all=TRUE,cex=.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel, use.n=TRUE,all=TRUE,cex=.9)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel, use.n=TRUE,all=TRUE,cex=.5)
text(modFit$finalModel, all=TRUE,cex=.8)
text(modFit$finalModel, use.n=TRUE,all=TRUE,cex=.8)
text(modFit$finalModel, use.n=TRUE,cex=.8)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle",dependencies = TRUE)
install.packages("rattle", dependencies = TRUE)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
View(olive)
data(olive)
View(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(olive)
modFit <- train(Area~.,method="rpart",data=olive)
library(caret)
modFit <- train(Area~.,method="rpart",data=olive)
predict(modFit,newdata=newdata)
View(olive)
str(Area)
str(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
trainSA = SAheart[train,-c(1,4)]
testSA = SAheart[-train,-c(1,4)]
modFit <- train(chd~.,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(modFit,testSA)
missClass(predict(modFit,testSA))
missClass(testSA$chd,predict(modFit,testSA))
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,-c(1,4)]
testSA = SAheart[-train,-c(1,4)]
set.seed(13234)
modFit <- train(chd~.,method="glm",family="binomial",data=trainSA)
#missClass function
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd~.,method="glm",family="binomial",data=trainSA)
#missClass function
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
View(trainSA)
modFit$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,-c(1,4)]
testSA = SAheart[-train,-c(1,4)]
modFit <- train(chd~.,method="glm",family="binomial",data=trainSA)
set.seed(13234)
modFit <- train(chd~.,method="glm",family="binomial",data=trainSA)
modfit$finalmod
modFit$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
View(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,-c(1,4,5)]
testSA = SAheart[-train,-c(1,4,5)]
set.seed(13234)
modFit <- train(chd~.,method="glm",family="binomial",data=trainSA)
#missClass function
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
head(vowel.train)
vowel.test[,1] <- factor(vowel.test[,1])
str(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test[,1] <- factor(vowel.test[,1])
vowel.train[,1] <- factor(vowel.train[,1])
modFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
modFit$finalModel
?varImp
varImp(modFit)
View(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test[,1] <- factor(vowel.test[,1])
vowel.train[,1] <- factor(vowel.train[,1])
set.seed(33833)
modFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modFit)
?randomForest
set.seed(33833)
modFit <- randomForest(y~.,data=vowel.train)
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test[,1] <- factor(vowel.test[,1])
vowel.train[,1] <- factor(vowel.train[,1])
set.seed(33833)
modFit <- randomForest(y~.,data=vowel.train)
varImp(modFit)
modFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modFit)
setwd("~/Coursera/Practical Machine Learning/PracMachLearnProject")
